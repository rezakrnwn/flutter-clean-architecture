// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_clean_architecture/test/feature/auth/presentation/login/login_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_clean_architecture/common/helpers/prefs_helper.dart'
    as _i7;
import 'package:flutter_clean_architecture/feature/auth/domain/entities/user.dart'
    as _i5;
import 'package:flutter_clean_architecture/feature/auth/domain/use_cases/do_login_use_case.dart'
    as _i4;
import 'package:flutter_clean_architecture/feature/auth/domain/use_cases/do_login_use_case_impl.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeSharedPreferences_1 extends _i1.Fake
    implements _i3.SharedPreferences {}

/// A class which mocks [DoLoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDoLoginUseCase extends _i1.Mock implements _i4.DoLoginUseCase {
  MockDoLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<Exception, _i5.User> call({_i6.DoLoginParams? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: _FakeEither_0<Exception, _i5.User>())
          as _i2.Either<Exception, _i5.User>);
}

/// A class which mocks [PrefsHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefsHelper extends _i1.Mock implements _i7.PrefsHelper {
  MockPrefsHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SharedPreferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakeSharedPreferences_1()) as _i3.SharedPreferences);
  @override
  bool isLoggedIn() => (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
      returnValue: false) as bool);
  @override
  _i8.Future<bool> setIsLoggedIn(bool? value) =>
      (super.noSuchMethod(Invocation.method(#setIsLoggedIn, [value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  String getUsername() =>
      (super.noSuchMethod(Invocation.method(#getUsername, []), returnValue: '')
          as String);
  @override
  _i8.Future<bool> setUsername(String? value) =>
      (super.noSuchMethod(Invocation.method(#setUsername, [value]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
}
